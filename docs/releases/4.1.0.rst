============================
Release notes for IRRd 4.1.0
============================

IRRd 4.1.0 adds :doc:`RPKI-aware mode </admins/rpki>`
and a new daemon architecture with full multiprocessing,
along with several other improvements.

This page contains details on the changes compared to
IRRd 4.0, and how to upgrade.

.. contents:: :backlinks: none

New features
------------

RPKI-aware mode
~~~~~~~~~~~~~~~
:doc:`RPKI-aware mode </admins/rpki>` is now available, where IRRd
imports RPKI ROAs and can filter or reject RPSL objects that are
in conflict with ROAs. Pseudo-IRR objects are generated for all ROAs.
When RPKI-aware mode is enabled, ``RPKI`` becomes an invalid as a regular
IRR source name, as it is reserved for pseudo-IRR objects from ROAs.

By default, RPKI-aware mode is disabled. Objects that are invalid when compared
to ROAs are not detected, and query responses are unchanged until
:doc:`RPKI-aware mode is enabled </admins/rpki>`.

IRRd 4.1.0 includes several database migrations to support RPKI-aware mode,
whether enabled or disabled, and facilitate performance improvements needed
for RPKI-aware mode. Running these migrations is required to run IRRd 4.1.0,
even if RPKI-aware mode is never enabled.

New daemon architecture
~~~~~~~~~~~~~~~~~~~~~~~
IRRd has a new daemon architecture, where all whois queries, HTTP requests,
mirror processes and the preloader run in their own process. This improves
performance significantly, especially where many processes are running
on servers with many cores. Previously, the entire IRRd process was limited
to one CPU core.

To communicate between processes, IRRd now requires a running Redis instance.
The commands to start IRRd and several IRRd scripts have also changed.

Other changes
~~~~~~~~~~~~~
* HTTP(s) downloads are now supported for the ``sources.{name}.import_source``
  and ``sources.{name}.import_serial_source`` settings.
* The ``redis_url`` and ``piddir`` configuration options were added.
  See the steps below or the
  :doc:`configuration documentation </admins/configuration>` for more
  information on these options


Steps required to upgrade
-------------------------
* Install a Redis instance as documented in the
  :ref:`deployment guide <deployment-redis-configuration>` and configure
  the ``redis_url`` setting.
* Note that unix sockets are strongly recommended over TCP sockets for both
  PostgreSQL and Redis, for improved performance. The effect of this is more
  significant with the new multi-process daemon architecture.
* Set ``piddir`` to a directory where IRRd can write its PID file, ``irrd.pid``.
* Run the database migrations, using the same command used to
  :ref:`create the tables initially in deployment <deployment-database-upgrade>`.
  **Important note**: some of the migrations change large amounts of data,
  and may take up to an hour to run in total. While the migrations are
  running, IRRd should be shut down and any cron / e-mail triggered tasks
  should be disabled. There should be no calls to ``irrd_submit_email`` or
  ``irrd_load_database``.
* Update any startup scripts or systemd for IRRd to call the new daemon process,
  with the new command line arguments:
  :ref:`updated deployment guide <deployment-redis-configuration>`.
* Remove the ``--irrd_pidfile`` parameter from calls to ``irrd_submit_email`` and
  ``irrd_load_database``.
* Start IRRd and re-enable the cron / e-mail triggered tasks.
